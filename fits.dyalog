:Namespace fits
⍝ === VARIABLES ===

block←36 80

fitstypes←'LXBIJKAEDCMPQ'

fitstypesizes←(3/1),2 4 8 1 4 8 8 16 8 16

h←(2880 5760 768960) (44 8⍴'XTENSIONBITPIX  NAXIS   NAXIS1  NAXIS2  PCOUNT  GCOUNT  TFIELDS TTYPE1  TFORM1  TTYPE2  TFORM2  TUNIT2  TTYPE3  TFORM3  TUNIT3  TTYPE4  TFORM4  TUNIT4  TTYPE5  TFORM5  TUNIT5  MOC     PIXTYPE ORDERINGCOORDSYSMOCORDERINDXSCHMOBJECT  REFERENCINSTRUMEDATE-OBSMJD-OBS DATE    CREATOR ORIGIN  RUNTIME DISTMEANDISTSTD LOGBCI  LOGBSN  VCSVERS VCSREV  DATE-BLD') (44 46⍴'binary table extension                        array data type                               number of array dimensions                    length of dimension 1                         length of dimension 2                         number of group parameters                    number of groups                              number of table fieldspixelisation                          Pixel ordering scheme: RING, NESTED, or NUNIQ Ecliptic, Galactic or Celestial (equatorial)  MOC resolution (best order)                   Indexing: IMPLICIT or EXPLICIT                Unique identifier for this event              URL of this event                             Instruments that triggered this event         UTC date of the observation                   modified Julian date of the observation       UTC date of file creation                     Program that created this file                Organization responsible for this FITS file   Runtime in seconds of the CREATOR program     Posterior mean distance (Mpc)                 Posterior standard deviation of distance (Mpc)Log Bayes factor: coherent vs. incoherent     Log Bayes factor: signal vs. noise            Software version                              Software revision (Git)                       Software build date                           ') (5,(7/6),(14/5),7,(3/5),6,(5/5),6,(3/5),(5/6),3/5) (0,(⎕io-⍨⍳7),(1+⎕io-⍨⍳14),0 15 16 17 7,(18+⎕io-⍨⍳5),8 23 24 25,(9+⎕io-⍨⍳5),26 27 28) ('BINTABLE' 'UNIQ    ' 'K       ' 'PROBDENSITY' 'D       ' 'sr-1    ' 'DISTMU  ' 'D       ' 'Mpc     ' 'DISTSIGMA' 'D       ' 'Mpc     ' 'DISTNORM' 'D       ' 'Mpc-2   ' 'HEALPIX ' 'NUNIQ   ' 'C       ' 'EXPLICIT' 'G366190 ' 'https://gracedb.ligo.org/events/G366190' 'H1,V1   ' '2020-03-02T01:58:11.519234' '2020-03-02T01:58:56.000000' 'BAYESTAR' 'LIGO/Virgo' 'ligo.skymap 0.1.15' '49a2164758503225e3e9e1ce34cb4ea64849ea95' '2020-01-05T21:30:06') (8 2 40 19200 0 1 5 8 58910.08207776892 2.368431584909558 1737.414538479503 500.2420472125742 0.7502584852510381 23.62612359988151) (,1) (0 72⍴' ') (9 72⍴'                                                                        Generated by calling the following Python function:                     ligo.skymap.bayestar.localize(event=..., waveform=''o2-uberbank'', f_low=30.0, min_inclination=0, max_inclination=1.5707963267948966, min_distance=None, max_distance=None, prior_distance_power=None, cosmology=False, mcmc=False, chain_dump=None, enable_snr_series=True, f_high_truncate=0.95)                                                                        This was the command line that started the program:                     gwcelery worker -l info -n gwcelery-openmp-worker-15 -Q openmp -c 1     ')


⍝ === End of variables definition ===

(⎕IO ⎕ML ⎕WX)←0 1 3

 binfields←{
     r←⍵∘readhead
     i←'TFORM' 'TTYPE' 'TUNIT'∘.,⍕¨1+⎕IO-⍨⍳r'TFIELDS'
     {
         (2↑⍵),{
             b←fitstypesizes[fitstypes⍳⊃1↓⍵]
             ⍵,⍨(+\b×¯1↓0,⊃⍵)b
         }↓⍉↑coltype¨↓⊃2↓⍵
     }¯1⌽{
         ⍵/⍨∨⌿~∨\' '=⍵
     }¨(⊂↑(8↑¨2⌷i){
         ⍺{
             ⍵\↑r ⍺/⍨⍵
         }⍺∊↓1⊃⍵
     }⍵),↑∘↑¨r¨↓2↑i
 }

 binmap←{(mapshape ⍵)⎕MAP ⍺'r'(+/2↑⊃⍵)}

 coltype←{
     {
         ≢⍵:⊃⍵
         'Invalid type specification'⎕SIGNAL 6
     }(('^ *(\d*)[',fitstypes,'] *$')⎕S{
         ⍵.Match{d t←⍵ ⋄ ({0=t:1 ⋄ ⍎t↑d↓⍵}⍺)(⊃⍺↓⍨d+t)}⍵.(,1↓Offsets,⍪Lengths)
     })⍵
 }

 fitsdr←{
     bigr←{⊃83 ⎕DR 256:⍵ ⋄ ⌽⍵}    ⍝ reverse if not big-endian
     out←(⍴,⍺)⍴⊂⍬
     inf←256⊥256|127 ¯16 0 0 0 0 0 0
     _←⍵{
         out[⍵]←⍺{
             ⍺='L':0=⍵
             ⍺='X':11 ⎕DR ⍵
             ⍺='B':2⊥⍵⊤⍨8⍴2     ⍝ might reshape to int16 for ⍵>127
             ⍺∊'IJM':bigr 163 323 1289['IJM'⍳⍺]⎕DR bigr ⍵
                ⍝⍺='K':{⍵+⍺×2*32}/{⍵{⍺⍴⍨(¯1↓⍵),(2÷⍨¯1↑⍵),2}⍴⍵}(2*32)|bigr 323 ⎕DR bigr ⍵
             ⍺='K':{⍉↑256⊥¨256|⍉¨⍵⊂⍨(8↑1)⍴⍨⊃¯1↑⍴⍵}⍵
             ⍺='A':80 ⎕DR ⍵
             ⍺='E':'32-bit floating point not yet supported.'⎕SIGNAL 6
             ⍺='D':{
                 11::{
                       ⍝ FIXME handle domain error
                     bigr ⍵
                 }⍵
                 bigr 645 ⎕DR bigr ⍵
             }⍵
             ⍺='C':'32-bit complex not yet supported.'⎕SIGNAL 6
             ⍺='P':'32-bit array descriptor not yet supported.'⎕SIGNAL 6
             ⍺='Q':'64-bit array descriptor not yet supported.'⎕SIGNAL 6
             ('Unrecognized fits type: ',⍺)⎕SIGNAL 6
         }¨,⍺⍺[⍵]
         ⍬
     }⌸,⍺
     out
 }

 headers←{
     p←⊂'^ {80}()()$'                                               ⍝ blank line
     p,←⊂'^END {77}()()$'                                            ⍝ end of header
     p,←⊂'^COMMENT .*()()$'                                          ⍝ comments
     p,←⊂'^HISTORY .*()()$'                                          ⍝ history
     p,←⊂'^..{7}= *''((?:[^'']|'''')*)[^/]*/? *(.*)$'                ⍝ strings
     p,←⊂'^..{7}= *[+-]?(\d+(?:\.\d*)?(?:[eEdD]\d*)?)[^/]*/? *(.*)$' ⍝ numbers
     p,←⊂'^..{7}= *([TF])[^/]*/? *(.*)$'                             ⍝ bools
     p,←⊂'^()()'                                                     ⍝ error
     lit←{⍵[⎕IO+1]{⍵[⎕IO+1]↑⍵[⎕IO]↓⍺}¨↓3 2⍴1↓⊃⍵}
     0(0 10⍴⍬){
         (⊃⍺)≥×/⍴⍵:⊃1↓⍺
         h←(0 4⍴⍬){
             r←⍺⍪↑(p ⎕S{⍵.(PatternNum,¯1↓,1↓Offsets,⍪Lengths)})↓36↑⍵↓⍨⊃⍴⍺
             t←⎕IO⌷⍉r
             1∊¯36↑t:{
                 7∊t:('Unrecognized metadata format: ',∊'→ '∘,¨⍵/⍨t=7)⎕SIGNAL 6
                 i c l←⍵{↑¨(↑∨/⍵)∘/¨¨⍵(↓1↓⍉r)(↓⍺)}t∘=¨4 5 6+⎕IO
                 (80×⍴t)(↑8↑¨l)({
                     ⍵/⍨∨⌿~⌽∧\⌽' '=⍵
                 }↑c[⎕IO+2;]↓¨l)(5+1⍳¨⍨↓⍉i)(1-⍨⎕IO++⌿i×+\i),({
                     ({⍵/⍨(⍵≠'''')∨2|⍳⍴⍵}¨⍵/⍨⎕IO⌷i)(⍎¨⍵/⍨i⌷⍨⎕IO+1)(∊'T'=⍵/⍨i⌷⍨⎕IO+2)
                 }l{
                     (⍵⊃⍨⎕IO+1)↑⍺↓⍨⊃⍵
                 }¨↓⍉2↑c),⍵∘{
                     ↑8↓¨⍺/⍨t=⍵
                 }¨2 3+⎕IO
             }↓⍵↑⍨⍴t
             r ∇ ⍵
         }⍵↓⍨80÷⍨⊃⍺
         size←(h readhead'BITPIX')×{
             'XTENSION'∊⍥↓⊃1↓h:⍵{(⊃1↓⍵)×⍺+⊃⍵}h readhead,∘'COUNT'¨'PG' ⋄ ⍵
         }{⍬≡⍵:0 ⋄ ×/⍵}shape h
         h[⎕IO]←⊂(⍺,⍥⊃h),2880×⌈size÷2880×8
         (+/⊃h)(h⍪⍨⊃1↓⍺)∇ ⍵
     }(80 ¯1 80)⎕MAP ⍵'r'
 }

 mapshape←{
     ¯1⌽(shape ⍵),{
         8|⍵:'[GCOUNT×]BITPIX must be multiple of 8'⎕SIGNAL 6
         83,⍨⍵÷8
     }×/⍵ readhead ⍵{'XTENSION'∊⍥↓⊃1↓⍺:'GCOUNT'⍵ ⋄ ⍵}'BITPIX'
 }

 orderkey←{(⌊¯1+4⍟⊃⍵)((1↓⍵){⍺({⍺[⍵;]}∘⍵¨⍺⍺)})⌸⍳⍴,⊃⍵}

parseBool←'^ *([TF]) *' (' literal←{' '     r←⊃((⍺⍺,''[^/]*(.*)$'')⎕S{' '         ⍵.(↓1↓Offsets,⍪Lengths)' '     })⍵' '     r≡0:⍬' '     d c←(↓⍵){(1↓⍵)↑⍺↓⍨⊃⍵}¨r' '     (⍵⍵ d)(1↓c)' ' }') (,⊂'{⍵=''T''}')

parseNum←'^ *[+-]?(\d+(?:\.\d*)?(?:[eEdD]\d*)?) *' (' literal←{' '     r←⊃((⍺⍺,''[^/]*(.*)$'')⎕S{' '         ⍵.(↓1↓Offsets,⍪Lengths)' '     })⍵' '     r≡0:⍬' '     d c←(↓⍵){(1↓⍵)↑⍺↓⍨⊃⍵}¨r' '     (⍵⍵ d)(1↓c)' ' }') (,⊂'{⍎⍵}')

parseStr←'^ *''((?:[^'']|'''')*)' (' literal←{' '     r←⊃((⍺⍺,''[^/]*(.*)$'')⎕S{' '         ⍵.(↓1↓Offsets,⍪Lengths)' '     })⍵' '     r≡0:⍬' '     d c←(↓⍵){(1↓⍵)↑⍺↓⍨⊃⍵}¨r' '     (⍵⍵ d)(1↓c)' ' }') (,⊂'{⍵/⍨(⍵≠'''''''')∨2|⍳⍴⍵}')

 readhead←{⍺{(,1↓⍵)⌷¨⊃∘⍺¨⎕IO⌷⍵}⍉((⊃1↓⍺)⍳⍥↓⍉8↑⍉↑⍵)∘.⌷2↑3↓⍺}

 shape←{⌽⍵∘readhead{⍺⍺ ⍵∘,¨⍕¨1+⎕IO-⍨⍳⍺⍺ ⍵}'NAXIS'}

 binnames←{⍺⍺∘((↓⊃binfields ⍵)~¨' ')⊆⍺}


 binread←{
     h←binfields ⍵
     ⍺←⍳⊃⍴⊃h
     c u d b s k←↑¨↓⍉h∘.⌷⍨∊((~∘' '¨↓⊃h)∘⍳@{~×10|⎕DR¨⍵})⊆⍺
     k fitsdr(({(2↑⍵),×/2↓⍵}mapshape ⍵)⎕MAP ⍺⍺'r'(+/2↑⊃⍵))∘{
         ⍉(⊃1↓⍵)↑(⊃⍵)↓⍉⍺
     }¨↓⍉↑d(b×s)
 }


 literal←{
     r←⊃((⍺⍺,'[^/]*(.*)$')⎕S{
         ⍵.(↓1↓Offsets,⍪Lengths)
     })⍵
     r≡0:⍬
     d c←(↓⍵){(1↓⍵)↑⍺↓⍨⊃⍵}¨r
     (⍵⍵ d)(1↓c)
 }


:EndNamespace 
